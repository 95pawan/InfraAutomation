pipeline {
    agent any
    parameters{
        
		booleanParam(defaultValue: true, description: 'VM Already Exists', name: 'VMFlag')
		
		choice(
            
        choices:'\nAzure\nAWS',
        description:'choose the cloud provider',
        name:'PUBLIC_CLOUD')
		
		choice(
            
        choices:'\nAnsible\nDocker',
        description:'Way to install application',
        name:'INFRA')
    }
	
	environment {
			
		commit_id = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
			
	}
	
    stages{
		stage ('checkout'){
		
			when {
                // checkout when Azure is  requested
                expression { params.PUBLIC_CLOUD == 'Azure' }
			}
				 
			steps{
				checkout scm
				}
		}
			 
		stage ('checkout_AWS'){
		
			when {
                expression { params.PUBLIC_CLOUD == 'AWS' }
			}
				
			steps{
				git credentialsId: 'd1d4fbac-ecd2-452f-82f4-e92ee4cd6e88', url: 'https://github.dxc.com/vrajamanick2/cloudformation.git'
			}
		}
            
            
		stage ('Run Azure Playbook'){
		
			when {

                expression { params.PUBLIC_CLOUD == 'Azure' && params.INFRA == 'Ansible' }
            }
			
			steps{
  ansiblePlaybook become: true,disableHostKeyChecking: true, credentialsId: 'ansibledev', installation: 'ansible-2.8.0', inventory: '${WORKSPACE}/hosts', playbook: '${WORKSPACE}/node-js.yml'
			}
		}
		
		 stage("docker build"){
			
			when {
  
                expression { params.INFRA == 'Docker' }
			}
			
			steps{			
			
			sh "docker build -t terra.azurecr.io/demowsqc:${commit_id}  ."
			
			}
	}
  
		stage("Push Image to Container Registry"){
		
			steps{
			
		
				withCredentials([
					[$class: 'UsernamePasswordMultiBinding', credentialsId: 'registryID', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
				])  
				{
				sh "docker login terra.azurecr.io -u '${env.USERNAME}' -p '${env.PASSWORD}'"
				}
				sh "docker push terra.azurecr.io/demowsqc:${commit_id}"
 
			}
		}
		
		    stage("Pull and deploy container"){
			
				steps{
			
				withDockerServer([credentialsId: 'dockerID', uri: 'terraformvm.westus2.cloudapp.azure.com'])
				{
					withCredentials([
					[$class: 'UsernamePasswordMultiBinding', credentialsId: 'registryID', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
					])  
						{
							sh "docker login terra.azurecr.io -u '${env.USERNAME}' -p '${env.PASSWORD}'"
						}
						
					sh "docker pull terra.azurecr.io/demowsqc:${commit_id}"
					sh "docker run -d -p 7060:8080 --name infrademo terra.azurecr.io/demowsqc:${commit_id}"
				}
				
			}
  
		}
  
